defmodule AttackBlobWeb.Endpoint do
  use Phoenix.Endpoint, otp_app: :attack_blob

  # The session will be stored in the cookie and signed,
  # this means its contents can be read but not tampered with.
  # Set :encryption_salt if you would also like to encrypt it.
  @session_options [
    store: :cookie,
    key: "_attack_blob_key",
    signing_salt: "qkr17RoJ",
    same_site: "Lax"
  ]

  # socket "/live", Phoenix.LiveView.Socket,
  #   websocket: [connect_info: [session: @session_options]],
  #   longpoll: [connect_info: [session: @session_options]]

  # Serve at "/" the static files from "priv/static" directory.
  #
  # When code reloading is disabled (e.g., in production),
  # the `gzip` option is enabled to serve compressed
  # static files generated by running `phx.digest`.
  plug Plug.Static,
    at: "/",
    from: :attack_blob,
    gzip: not code_reloading?,
    only: AttackBlobWeb.static_paths()

  # CORS configuration - loaded from application config (runtime.exs)
  @cors_config Application.compile_env(:attack_blob, :cors, [])

  plug Corsica,
    origins: @cors_config[:origins] || ~r/.*/,
    allow_headers: :all,
    allow_methods: :all,
    allow_credentials: @cors_config[:allow_credentials] || true,
    max_age: @cors_config[:max_age] || 600,
    log: [rejected: :warn, invalid: :warn, accepted: :debug]

  # Code reloading can be explicitly enabled under the
  # :code_reloader configuration of your endpoint.
  if code_reloading? do
    plug Phoenix.CodeReloader
  end

  plug Plug.RequestId
  plug Plug.Telemetry, event_prefix: [:phoenix, :endpoint]

  plug Plug.Parsers,
    parsers: [:urlencoded, :multipart, :json],
    pass: ["*/*"],
    json_decoder: Phoenix.json_library()

  plug Plug.MethodOverride
  plug Plug.Head
  plug Plug.Session, @session_options
  plug AttackBlobWeb.Router
end
